generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  real
  demo
}

enum Status {
  active
  inactive
  win
  loss
  open
}

enum StopType {
  percentage
  value
}

enum OrderType {
  call
  put
}

enum Source {
  auto
  manual
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  ssid      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  ssid      String   @unique
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Strategy {
  id                  Int      @id
  name                String   @unique
  description         String?
  isActive            Status  @default(inactive)
  
  // Configurações de valor e conta
  entryValue          Float    @default(5.0)
  accountType         AccountType   @default(demo)
  
  // Configurações de Stop Gain
  stopGainType        StopType?  @default(value) // "percentage" ou "value"
  stopGainValue       Float?   @default(0)
  stopGainEnabled     Boolean  @default(false)
  dailyResetGain      Boolean  @default(true) // Reset à meia-noite
  
  // Configurações de Stop Loss
  stopLossType        StopType?  @default(value) // "percentage" ou "value"
  stopLossValue       Float?   @default(0)
  stopLossEnabled     Boolean  @default(false)
  dailyResetLoss      Boolean  @default(true) // Reset à meia-noite
  
  // Valores de controle para stops
  currentDayProfit    Float?   @default(0) // Lucro/prejuízo do dia (reseta se configurado)
  stopBaseBalance     Float?   // Saldo base para cálculo de %
  lastResetDate       DateTime? // Última vez que foi resetado
  stopHitDate         DateTime? // Quando atingiu stop (se não tem reset)
  
  // Métricas históricas (nunca resetam)
  accuracyRate        Float?   @default(0)
  totalProfit         Float?   @default(0) // Lucro/prejuízo TOTAL histórico
  operationCount      Int?     @default(0)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  orders              Order[]
  
  @@map("strategies")
}

model Order {
  id            Int        @id @default(autoincrement())
  dateTime      DateTime
  strategyId    Int?
  strategy      Strategy?  @relation(fields: [strategyId], references: [id])
  asset         String
  type          OrderType  // "call" | "put"
  amount        Float
  status        Status     // "win" | "loss" | "open"
  profit        Float
  source        Source     // "auto" | "manual"
  accountType   AccountType // "real" | "demo"
  payoutPercent Float?
  entryPrice    Float?
  closePrice    Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Config {
  id                  Int      @id @default(1) // Garantir ID fixo
  autoConnect         Boolean  @default(false)
  defaultEntryValue   Float    @default(5.0)
  maxOperationsPerDay Int      @default(50)
  stopLoss            Float    @default(0)
  stopGain            Float    @default(0)
  stopLossEnabled     Boolean  @default(false)
  stopGainEnabled     Boolean  @default(false)
  notifications       Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("configs")
}